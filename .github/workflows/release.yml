name: Manage Releases

on:
  push:
    branches:
      - main

jobs:
  versioning-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-Increment Version
        id: version
        run: |
          # Extract the current version from hacs.json
          CURRENT_VERSION=$(jq -r '.version' hacs.json)
          echo "Current Version: $CURRENT_VERSION"

          # If no version is found, start at 1.0.0
          if [[ -z "$CURRENT_VERSION" || "$CURRENT_VERSION" == "null" ]]; then
            CURRENT_VERSION="1.0.0"
          fi

          # Increment the patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "New Version: $NEW_VERSION"

          # Export the new version for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Debug Version
        run: echo "New Version: ${{ env.new_version }}"

      - name: Update hacs.json and manifest.json
        run: |
          # Update hacs.json and manifest.json with the new version
          jq ".version = \"$NEW_VERSION\"" hacs.json > tmp_hacs.json && mv tmp_hacs.json hacs.json
          jq ".version = \"$NEW_VERSION\"" manifest.json > tmp_manifest.json && mv tmp_manifest.json manifest.json

          # Stage changes for commit
          git add hacs.json manifest.json

          # Commit the version bump
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git commit -m "Auto-bump version to v$NEW_VERSION" || echo "No changes to commit"
        env:
          NEW_VERSION: ${{ env.new_version }}

      - name: Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.new_version }}
        run: |
          # Push the changes to the repository
          git push origin main || echo "No changes to push"

      - name: Create or Force Push Tag
        env:
          NEW_VERSION: ${{ env.new_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the tag exists in the remote
          if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
            echo "Tag v$NEW_VERSION already exists. Forcing update."
            git tag -d "v$NEW_VERSION"
            git push origin :refs/tags/v$NEW_VERSION
          fi

          # Create and push the new tag
          git tag -a "v$NEW_VERSION" -m "Version v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "v${{ env.new_version }}"
          name: "v${{ env.new_version }}"
          body: "Auto-generated release for version v${{ env.new_version }}"
